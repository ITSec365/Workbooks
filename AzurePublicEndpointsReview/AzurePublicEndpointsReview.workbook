{
  "version": "Notebook/1.0",
  "items": [
    {
      "type": 1,
      "content": {
        "json": "## Public Endpoints Review\n---\n\nThis workbook assists to review the resources with Public endpoint or access from Public IP/Internet is enabled in your Azure environment. \n\n# Review Considerations\nPaas Services \n* Review the Network configuration for the respective resource and see if it meets your security requirements. Note App Services and Function Apps will have default public access (with null value in JSON ) unless you specifically disable it. \n\nNetwork Rules\n* Review the resources with Public IP address \n* Review the NSG rules with * (All IP addresses) in source or destination and sensitive ports like 3389, 22, 21 etc. \n* Review the Load Balancer, Application Gateway to see the backend pools connecting to Public IPs. \nNetwork Services\n* Review the existing Azure Firewalls, Bastion Hosts, VPN Gateways, VNet Gateways, Express Route Circuits \n\nAPI Connection\n* Review the Logic Apps/API Connection not using Managed Identity or connecting Logic Apps to external SaaS apps\n\nInternal Networks\n* Review the Route Tables with internet destinations and nexthop without virtualappliances \n* Review Subnets without Route Tables \n\n\n",
        "style": "info"
      },
      "name": "text - 2"
    },
    {
      "type": 1,
      "content": {
        "json": "<svg viewBox=\"0 0 19 19\" width=\"20\" class=\"fxt-escapeShadow\" role=\"presentation\" focusable=\"false\" xmlns:svg=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" aria-hidden=\"true\"><g><path fill=\"#1b93eb\" d=\"M16.82 8.886c0 4.81-5.752 8.574-7.006 9.411a.477.477 0 01-.523 0C8.036 17.565 2.18 13.7 2.18 8.886V3.135a.451.451 0 01.42-.419C7.2 2.612 6.154.625 9.5.625s2.3 1.987 6.8 2.091a.479.479 0 01.523.419z\"></path><path fill=\"url(#0024423711759027356)\" d=\"M16.192 8.99c0 4.392-5.333 7.947-6.483 8.575a.319.319 0 01-.418 0c-1.15-.732-6.483-4.183-6.483-8.575V3.762a.575.575 0 01.313-.523C7.2 3.135 6.258 1.357 9.4 1.357s2.2 1.882 6.274 1.882a.45.45 0 01.419.418z\"></path><path d=\"M9.219 5.378a.313.313 0 01.562 0l.875 1.772a.314.314 0 00.236.172l1.957.284a.314.314 0 01.174.535l-1.416 1.38a.312.312 0 00-.09.278l.334 1.949a.313.313 0 01-.455.33l-1.75-.92a.314.314 0 00-.292 0l-1.75.92a.313.313 0 01-.455-.33L7.483 9.8a.312.312 0 00-.09-.278L5.977 8.141a.314.314 0 01.174-.535l1.957-.284a.314.314 0 00.236-.172z\" class=\"msportalfx-svg-c01\"></path></g></svg>&nbsp;<span style=\"font-family: Open Sans; font-weight: 620; font-size: 14px;font-style: bold;margin:-10px 0px 0px 0px;position: relative;top:-3px;left:-4px;\"> Please take time to answer a quick survey,\r\n</span>[<span style=\"font-family: Open Sans; font-weight: 620; font-size: 14px;font-style: bold;margin:-10px 0px 0px 0px;position: relative;top:-3px;left:-4px;\"> click here. </span>](https://forms.microsoft.com/Pages/ResponsePage.aspx?id=v4j5cvGGr0GRqy180BHbR6WFGSmpLgBFs8JcO3-8uANUOUpaWlNYWEIxTTI0VldWVk40V0VBOFVIWS4u)"
      },
      "name": "text - 49"
    },
    {
      "type": 9,
      "content": {
        "version": "KqlParameterItem/1.0",
        "parameters": [
          {
            "id": "c06d7d5c-b6c5-41f7-9f8d-b01dd1ec1088",
            "version": "KqlParameterItem/1.0",
            "name": "SubscriptionName",
            "type": 6,
            "isRequired": true,
            "multiSelect": true,
            "quote": "'",
            "delimiter": ",",
            "typeSettings": {
              "additionalResourceOptions": [],
              "includeAll": false
            },
            "timeContext": {
              "durationMs": 86400000
            },
            "value": [
              "/subscriptions/d0d4dfbc-9f34-41b1-8767-58818e4ac738"
            ]
          }
        ],
        "style": "pills",
        "queryType": 0,
        "resourceType": "microsoft.operationalinsights/workspaces"
      },
      "name": "parameters - 15"
    },
    {
      "type": 11,
      "content": {
        "version": "LinkItem/1.0",
        "style": "tabs",
        "links": [
          {
            "id": "910c424e-c1fd-49ad-8203-c7420faf370f",
            "cellValue": "tab",
            "linkTarget": "parameter",
            "linkLabel": "PaaS Services",
            "subTarget": "paas",
            "style": "link"
          },
          {
            "id": "993f680e-0486-40e9-846a-e7beb5e2884c",
            "cellValue": "tab",
            "linkTarget": "parameter",
            "linkLabel": "Network Rules",
            "subTarget": "rules",
            "style": "link"
          },
          {
            "id": "f514fefd-63dd-4520-9ded-3276c93987bc",
            "cellValue": "tab",
            "linkTarget": "parameter",
            "linkLabel": "Network Services",
            "subTarget": "network",
            "style": "link"
          },
          {
            "id": "013c07a1-018a-416b-b3b3-da4993c1e443",
            "cellValue": "tab",
            "linkTarget": "parameter",
            "linkLabel": "API Connections",
            "subTarget": "api",
            "style": "link"
          },
          {
            "id": "dd0bdc04-071e-41b3-9f36-b7158c0bd11e",
            "cellValue": "tab",
            "linkTarget": "parameter",
            "linkLabel": "Internal Networks",
            "subTarget": "internal",
            "style": "link"
          },
          {
            "id": "de59d4b3-0ed3-47ee-b5ba-273f82b59f30",
            "cellValue": "tab",
            "linkTarget": "parameter",
            "linkLabel": "MDC Recommendations",
            "subTarget": "security",
            "style": "link"
          }
        ]
      },
      "name": "links - 16"
    },
    {
      "type": 1,
      "content": {
        "json": "Overview of Resources with Public Access Enabled \r\n\r\nReview the resource with Public Access enabled and see if it meets your security requirements by expanding the respetive resource.  \r\n\r\nNote App Services and Function Apps will have default public access (with null value in JSON) unless you specifically disable it. Hence they are not shown in the overall view.But you can see their Public Access status in a separate table below. \r\n",
        "style": "success"
      },
      "conditionalVisibility": {
        "parameterName": "tab",
        "comparison": "isEqualTo",
        "value": "paas"
      },
      "name": "Paas Review"
    },
    {
      "type": 3,
      "content": {
        "version": "KqlItem/1.0",
        "query": "Resources\r\n| where tostring(properties.publicNetworkAccess) in ( \"Enabled\", \"true\")\r\n//| where tostring(properties.networkAccessPolicy) contains \"AllowAll\"\r\n| project Resource_ID = tostring(id),\r\n    Subscription_ID = tostring(subscriptionId),\r\n    Resoure_Group = tostring(resourceGroup),\r\n    Resource_Name = tostring(name), \r\n    Resource_Type = tostring(type), \r\n    Resource_Location = tostring(location),\r\n    PublicNetworkAccess = tostring(properties.publicNetworkAccess), \r\n    NetworkAccessPolicy = tostring(properties.networkAccessPolicy)\r\n",
        "size": 0,
        "title": "Overview of Resources with Public Access enabled",
        "queryType": 1,
        "resourceType": "microsoft.resourcegraph/resources",
        "crossComponentResources": [
          "{SubscriptionName}"
        ],
        "gridSettings": {
          "hierarchySettings": {
            "treeType": 1,
            "groupBy": [
              "Resource_Type"
            ]
          }
        }
      },
      "conditionalVisibility": {
        "parameterName": "tab",
        "comparison": "isEqualTo",
        "value": "paas"
      },
      "name": "Resources with Public Access enabled"
    },
    {
      "type": 1,
      "content": {
        "json": "Paas Services\r\n\r\nReview the Network configuration (Public Network Access, HTTPS, PrivateEndpoint configuration) for the respective resource and see if it meets your security requirements. \r\n\r\nNote App Services and Function Apps will have default public access (with null value in JSON ) unless you specifically disable it.Review http triggers and webjobs in App Services for any anonymous access.\r\n",
        "style": "success"
      },
      "conditionalVisibility": {
        "parameterName": "tab",
        "comparison": "isEqualTo",
        "value": "paas"
      },
      "name": "Paas Review - Copy"
    },
    {
      "type": 3,
      "content": {
        "version": "KqlItem/1.0",
        "query": "resources\r\n| where type == \"microsoft.web/sites\"\r\n| extend RG = substring(id, 0, indexof(id, '/providers'))\r\n| extend publicnetworkaccess = tostring(properties.publicNetworkAccess)\r\n| extend privateEndpointConnections = tostring(properties.privateEndpointConnections)\r\n| extend virtualNetworkSubnetId = tostring(properties.virtualNetworkSubnetId)\r\n| extend httpsOnly = tostring(properties.httpsOnly)\r\n| project-away name, properties, managedBy, sku, plan, identity, tenantId, tags, zones, extendedLocation, apiVersion, resourceGroup",
        "size": 0,
        "title": "List of Appservices",
        "exportedParameters": [
          {
            "fieldName": "id",
            "parameterName": "ResourceID",
            "parameterType": 5
          }
        ],
        "queryType": 1,
        "resourceType": "microsoft.resourcegraph/resources",
        "crossComponentResources": [
          "{SubscriptionName}"
        ]
      },
      "conditionalVisibility": {
        "parameterName": "tab",
        "comparison": "isEqualTo",
        "value": "paas"
      },
      "name": "Appservices"
    },
    {
      "type": 1,
      "content": {
        "json": "Paas Services\r\n\r\nPlease select AppService from above table to view the Properities, configuration and triggered jobs if any.  \r\n",
        "style": "success"
      },
      "conditionalVisibility": {
        "parameterName": "tab",
        "comparison": "isEqualTo",
        "value": "paas"
      },
      "name": "Paas Review - Copy"
    },
    {
      "type": 3,
      "content": {
        "version": "KqlItem/1.0",
        "query": "{\"version\":\"ARMEndpoint/1.0\",\"data\":null,\"headers\":[],\"method\":\"GET\",\"path\":\"{ResourceID}/config/web?api-version=2021-02-01\",\"urlParams\":[],\"batchDisabled\":false,\"transformers\":[{\"type\":\"jsonpath\"}]}",
        "size": 1,
        "title": "Properties of Selected App Service",
        "noDataMessage": "Please select AppService from above table",
        "exportedParameters": [
          {
            "fieldName": "id",
            "parameterName": "ResourceID",
            "parameterType": 5
          }
        ],
        "queryType": 12
      },
      "conditionalVisibility": {
        "parameterName": "tab",
        "comparison": "isEqualTo",
        "value": "paas"
      },
      "name": "Appservices - properties"
    },
    {
      "type": 3,
      "content": {
        "version": "KqlItem/1.0",
        "query": "{\"version\":\"ARMEndpoint/1.0\",\"data\":null,\"headers\":[],\"method\":\"GET\",\"path\":\"{ResourceID}/functions?api-version=2022-03-01\",\"urlParams\":[],\"batchDisabled\":false,\"transformers\":[{\"type\":\"jsonpath\",\"settings\":{\"tablePath\":\"$.value..config\",\"columns\":[]}}]}",
        "size": 1,
        "title": "Configuration of Function for Selected App Services if available",
        "noDataMessage": "Please select AppService from above table",
        "exportedParameters": [
          {
            "fieldName": "id",
            "parameterName": "ResourceID",
            "parameterType": 5
          }
        ],
        "queryType": 12,
        "gridSettings": {
          "formatters": [
            {
              "columnMatch": "value",
              "formatter": 13,
              "formatOptions": {
                "linkTarget": "Resource",
                "showIcon": true
              }
            },
            {
              "columnMatch": "properties",
              "formatter": 16,
              "formatOptions": {
                "showIcon": true,
                "customColumnWidthSetting": "20ch"
              }
            }
          ]
        }
      },
      "conditionalVisibility": {
        "parameterName": "tab",
        "comparison": "isEqualTo",
        "value": "paas"
      },
      "name": "Appservices -List Functions"
    },
    {
      "type": 3,
      "content": {
        "version": "KqlItem/1.0",
        "query": "{\"version\":\"ARMEndpoint/1.0\",\"data\":null,\"headers\":[],\"method\":\"GET\",\"path\":\"{ResourceID}/triggeredwebjobs?api-version=2022-03-01\",\"urlParams\":[],\"batchDisabled\":false,\"transformers\":[null]}",
        "size": 1,
        "title": "List of Triggered Web Jobs for the selected App Service",
        "noDataMessage": "Please select App Service",
        "exportedParameters": [
          {
            "fieldName": "id",
            "parameterName": "ResourceID",
            "parameterType": 5
          }
        ],
        "queryType": 12
      },
      "conditionalVisibility": {
        "parameterName": "tab",
        "comparison": "isEqualTo",
        "value": "paas"
      },
      "name": "Appservices - triggered webJobs"
    },
    {
      "type": 3,
      "content": {
        "version": "KqlItem/1.0",
        "query": "resources\r\n| where type == \"microsoft.storage/storageaccounts\"\r\n| extend RG = substring(id, 0, indexof(id, '/providers'))\r\n| extend supportsHttpsTrafficOnly = properties.supportsHttpsTrafficOnly\r\n| extend allowBlobPublicAccess = properties.allowBlobPublicAccess\r\n| extend networkAcls = tostring(properties.networkAcls.virtualNetworkRules)\r\n| extend privateEndpointConnections = tostring(properties.privateEndpointConnections)\r\n| extend defaultAction = properties.networkAcls.defaultAction\r\n| extend ipRules = tostring(properties.networkAcls.ipRules)\r\n| project-away kind, name, managedBy, sku, plan, identity, properties, tenantId, tags, zones, extendedLocation, apiVersion, resourceGroup",
        "size": 0,
        "title": "List of storage accounts ",
        "showExportToExcel": true,
        "queryType": 1,
        "resourceType": "microsoft.resourcegraph/resources",
        "crossComponentResources": [
          "{SubscriptionName}"
        ],
        "gridSettings": {
          "formatters": [
            {
              "columnMatch": "type",
              "formatter": 16,
              "formatOptions": {
                "showIcon": true
              }
            },
            {
              "columnMatch": "location",
              "formatter": 17
            },
            {
              "columnMatch": "subscriptionId",
              "formatter": 15,
              "formatOptions": {
                "linkTarget": "Resource",
                "showIcon": true
              }
            },
            {
              "columnMatch": "supportsHttpsTrafficOnly",
              "formatter": 0,
              "formatOptions": {
                "customColumnWidthSetting": "25ch"
              }
            },
            {
              "columnMatch": "networkAcls",
              "formatter": 18,
              "formatOptions": {
                "thresholdsOptions": "icons",
                "thresholdsGrid": [
                  {
                    "operator": "==",
                    "thresholdValue": "[]",
                    "representation": "more",
                    "text": "Not Configured"
                  },
                  {
                    "operator": "Default",
                    "thresholdValue": null,
                    "representation": "success",
                    "text": "Configured"
                  }
                ],
                "customColumnWidthSetting": "25ch"
              }
            },
            {
              "columnMatch": "privateEndpointConnections",
              "formatter": 18,
              "formatOptions": {
                "thresholdsOptions": "icons",
                "thresholdsGrid": [
                  {
                    "operator": "==",
                    "thresholdValue": "[]",
                    "representation": "more",
                    "text": "Not Configured"
                  },
                  {
                    "operator": "Default",
                    "thresholdValue": null,
                    "representation": "success",
                    "text": "Configured"
                  }
                ]
              }
            },
            {
              "columnMatch": "ipRules",
              "formatter": 18,
              "formatOptions": {
                "thresholdsOptions": "icons",
                "thresholdsGrid": [
                  {
                    "operator": "==",
                    "thresholdValue": "[]",
                    "representation": "more",
                    "text": "Not Configured"
                  },
                  {
                    "operator": "Default",
                    "thresholdValue": null,
                    "representation": "success",
                    "text": "{0}{1}"
                  }
                ]
              }
            }
          ]
        }
      },
      "conditionalVisibility": {
        "parameterName": "tab",
        "comparison": "isEqualTo",
        "value": "paas"
      },
      "name": "List of storage accounts "
    },
    {
      "type": 3,
      "content": {
        "version": "KqlItem/1.0",
        "query": "resources\r\n| where type =~ \"microsoft.keyVault/vaults\"\r\n| extend RG = substring(id, 0, indexof(id, '/providers'))\r\n| extend privateEndpointConnections = tostring(properties.privateEndpointConnections)\r\n| extend virtualNetworkRules = tostring(properties.networkAcls.virtualNetworkRules)\r\n| extend ipRules = tostring(properties.networkAcls.ipRules)\r\n| project-away name, managedBy, sku, plan, identity, tenantId, properties, tags, kind, zones, extendedLocation, apiVersion, resourceGroup",
        "size": 0,
        "title": "List of Key Vaults",
        "showExportToExcel": true,
        "queryType": 1,
        "resourceType": "microsoft.resourcegraph/resources",
        "crossComponentResources": [
          "{SubscriptionName}"
        ],
        "gridSettings": {
          "formatters": [
            {
              "columnMatch": "type",
              "formatter": 16,
              "formatOptions": {
                "showIcon": true
              }
            },
            {
              "columnMatch": "location",
              "formatter": 17
            },
            {
              "columnMatch": "subscriptionId",
              "formatter": 15,
              "formatOptions": {
                "linkTarget": "Resource",
                "showIcon": true
              }
            },
            {
              "columnMatch": "supportsHttpsTrafficOnly",
              "formatter": 0,
              "formatOptions": {
                "customColumnWidthSetting": "25ch"
              }
            },
            {
              "columnMatch": "networkAcls",
              "formatter": 18,
              "formatOptions": {
                "thresholdsOptions": "icons",
                "thresholdsGrid": [
                  {
                    "operator": "==",
                    "thresholdValue": "[]",
                    "representation": "more",
                    "text": "Not Configured"
                  },
                  {
                    "operator": "Default",
                    "thresholdValue": null,
                    "representation": "success",
                    "text": "Configured"
                  }
                ],
                "customColumnWidthSetting": "25ch"
              }
            },
            {
              "columnMatch": "privateEndpointConnections",
              "formatter": 18,
              "formatOptions": {
                "thresholdsOptions": "icons",
                "thresholdsGrid": [
                  {
                    "operator": "==",
                    "thresholdValue": "[]",
                    "representation": "more",
                    "text": "Not Configured"
                  },
                  {
                    "operator": "Default",
                    "thresholdValue": null,
                    "representation": "success",
                    "text": "Configured"
                  }
                ]
              }
            },
            {
              "columnMatch": "ipRules",
              "formatter": 18,
              "formatOptions": {
                "thresholdsOptions": "icons",
                "thresholdsGrid": [
                  {
                    "operator": "==",
                    "thresholdValue": "[]",
                    "representation": "more",
                    "text": "Not Configured"
                  },
                  {
                    "operator": "Default",
                    "thresholdValue": null,
                    "representation": "success",
                    "text": "{0}{1}"
                  }
                ]
              }
            }
          ]
        }
      },
      "conditionalVisibility": {
        "parameterName": "tab",
        "comparison": "isEqualTo",
        "value": "paas"
      },
      "name": "List of Key Vaults"
    },
    {
      "type": 3,
      "content": {
        "version": "KqlItem/1.0",
        "query": "resources\r\n| where type == \"microsoft.eventhub/namespaces\"\r\n| extend RG = substring(id, 0, indexof(id, '/providers'))\r\n| extend publicNetworkAccess = tostring(properties.publicNetworkAccess)\r\n| project-away name, kind, managedBy,tags, extendedLocation, properties, sku, plan, identity, zones, tenantId",
        "size": 0,
        "title": "List of Event Hubs",
        "showExportToExcel": true,
        "queryType": 1,
        "resourceType": "microsoft.resourcegraph/resources",
        "crossComponentResources": [
          "{SubscriptionName}"
        ],
        "gridSettings": {
          "formatters": [
            {
              "columnMatch": "type",
              "formatter": 16,
              "formatOptions": {
                "showIcon": true
              }
            },
            {
              "columnMatch": "location",
              "formatter": 17
            },
            {
              "columnMatch": "subscriptionId",
              "formatter": 15,
              "formatOptions": {
                "linkTarget": "Resource",
                "showIcon": true
              }
            },
            {
              "columnMatch": "supportsHttpsTrafficOnly",
              "formatter": 0,
              "formatOptions": {
                "customColumnWidthSetting": "25ch"
              }
            },
            {
              "columnMatch": "networkAcls",
              "formatter": 18,
              "formatOptions": {
                "thresholdsOptions": "icons",
                "thresholdsGrid": [
                  {
                    "operator": "==",
                    "thresholdValue": "[]",
                    "representation": "more",
                    "text": "Not Configured"
                  },
                  {
                    "operator": "Default",
                    "thresholdValue": null,
                    "representation": "success",
                    "text": "Configured"
                  }
                ],
                "customColumnWidthSetting": "25ch"
              }
            },
            {
              "columnMatch": "privateEndpointConnections",
              "formatter": 18,
              "formatOptions": {
                "thresholdsOptions": "icons",
                "thresholdsGrid": [
                  {
                    "operator": "==",
                    "thresholdValue": "[]",
                    "representation": "more",
                    "text": "Not Configured"
                  },
                  {
                    "operator": "Default",
                    "thresholdValue": null,
                    "representation": "success",
                    "text": "Configured"
                  }
                ]
              }
            },
            {
              "columnMatch": "ipRules",
              "formatter": 18,
              "formatOptions": {
                "thresholdsOptions": "icons",
                "thresholdsGrid": [
                  {
                    "operator": "==",
                    "thresholdValue": "[]",
                    "representation": "more",
                    "text": "Not Configured"
                  },
                  {
                    "operator": "Default",
                    "thresholdValue": null,
                    "representation": "success",
                    "text": "{0}{1}"
                  }
                ]
              }
            }
          ]
        }
      },
      "conditionalVisibility": {
        "parameterName": "tab",
        "comparison": "isEqualTo",
        "value": "paas"
      },
      "name": "List of Event Hubs"
    },
    {
      "type": 3,
      "content": {
        "version": "KqlItem/1.0",
        "query": "resources\r\n| where ['type'] in~ (\"microsoft.sql/servers\" , \"microsoft.dbformysql/servers\", \"microsoft.dbforpostgresql/servers\", \"microsoft.dbformariadb/servers\")\r\n| extend RG = substring(id, 0, indexof(id, '/providers'))\r\n| extend publicNetworkAccess = properties.publicNetworkAccess\r\n| extend privateEndpointConnections = tostring(properties.privateEndpointConnections)\r\n| extend sslEnforcement = properties.sslEnforcement\r\n| project-away kind, managedBy, sku, plan, identity, properties, tenantId, tags, zones, extendedLocation, resourceGroup",
        "size": 0,
        "title": "List of Databases",
        "showExportToExcel": true,
        "queryType": 1,
        "resourceType": "microsoft.resourcegraph/resources",
        "crossComponentResources": [
          "{SubscriptionName}"
        ],
        "gridSettings": {
          "formatters": [
            {
              "columnMatch": "privateEndpointConnections",
              "formatter": 18,
              "formatOptions": {
                "thresholdsOptions": "icons",
                "thresholdsGrid": [
                  {
                    "operator": "==",
                    "thresholdValue": "[]",
                    "representation": "more",
                    "text": "Not Configured"
                  },
                  {
                    "operator": "Default",
                    "thresholdValue": null,
                    "representation": "success",
                    "text": "Configured"
                  }
                ]
              }
            }
          ]
        }
      },
      "conditionalVisibility": {
        "parameterName": "tab",
        "comparison": "isEqualTo",
        "value": "paas"
      },
      "name": "List of Databases"
    },
    {
      "type": 1,
      "content": {
        "json": "Public IP\r\n\r\nReview the resources with Public IP address for their connectivity to Internet",
        "style": "success"
      },
      "conditionalVisibility": {
        "parameterName": "tab",
        "comparison": "isEqualTo",
        "value": "rules"
      },
      "name": "text - 35"
    },
    {
      "type": 3,
      "content": {
        "version": "KqlItem/1.0",
        "query": "Resources\r\n| where type contains 'publicIPAddresses' and isnotempty(properties.ipAddress)\r\n| extend RG = substring(id, 0, indexof(id, '/providers'))\r\n| extend publicipaddress = tostring(properties.ipAddress)\r\n| extend sku = tostring(sku.name)\r\n| extend pipallocationmethod = tostring(properties.publicIPAllocationMethod)\r\n| extend ipConfiguration = parse_json(properties.ipConfiguration.id)\r\n| extend BrkipConfig = split(ipConfiguration, '/')\r\n| extend assetprovider = tostring(BrkipConfig[6])\r\n| extend typeassetassociatedwith = iif(isempty(tostring(BrkipConfig[7])),\"not associated\",tostring(BrkipConfig[7]))\r\n| extend nameassetassociatedwith = substring(properties.ipConfiguration.id, 0, indexof(properties.ipConfiguration.id, '/ipConfigurations'))\r\n| extend dnsname = tostring(properties.dnsSettings.fqdn)\r\n| project-away name, tenantId, kind, resourceGroup, managedBy, apiVersion, plan, properties, tags, identity, zones, extendedLocation, ipConfiguration, BrkipConfig, assetprovider, sku\r\n//| project Resource = id, location, publicipaddress, pipallocationmethod, dnsname, sku, nameassetassociatedwith, typeassetassociatedwith, subscriptionId, ResourceGroup = RG",
        "size": 0,
        "title": "Public IP Addresses",
        "showExportToExcel": true,
        "queryType": 1,
        "resourceType": "microsoft.resourcegraph/resources",
        "crossComponentResources": [
          "{SubscriptionName}"
        ]
      },
      "conditionalVisibility": {
        "parameterName": "tab",
        "comparison": "isEqualTo",
        "value": "rules"
      },
      "name": "Public IP Addresses"
    },
    {
      "type": 1,
      "content": {
        "json": "NSG Rules\r\n\r\nReview the NSG rules with * (All IP addresses) in source or destinaltion and sensitivie ports like 3389, 22, 21 etc.",
        "style": "success"
      },
      "conditionalVisibility": {
        "parameterName": "tab",
        "comparison": "isEqualTo",
        "value": "internal"
      },
      "name": "text - 35 - Copy"
    },
    {
      "type": 3,
      "content": {
        "version": "KqlItem/1.0",
        "query": "Resources\r\n| where type contains 'microsoft.network/Networksecuritygroups'\r\n| extend RG = substring(id, 0, indexof(id, '/providers'))\r\n| extend nic = properties.networkInterfaces\r\n| mv-expand nic\r\n| extend NICId = nic.id\r\n| extend udrulesubnetids = properties.subnets\r\n| extend udrules = properties.securityRules\r\n| mv-expand udrules\r\n| extend UserDefinedRuleName = tostring(udrules.name)\r\n| extend UDRuleProtocol = tostring(udrules.properties.protocol)\r\n| extend UDRuleDestinationPort = tostring(udrules.properties.destinationPortRange)\r\n| extend UDRuleDestinationPortList = tostring(udrules.properties.destinationPortRanges)\r\n| extend UDRuleDirection = tostring(udrules.properties.direction)\r\n| extend UDRuleSourceNetwork = tostring(udrules.properties.sourceAddressPrefix)\r\n| extend UDRuleDestinationNetwork = tostring(udrules.properties.destinationAddressPrefix)\r\n| extend UDRuleAccess = tostring(udrules.properties.access)\r\n| project-away udrules, kind, managedBy, nic, identity, zones, name, tenantId, tags, extendedLocation, properties, sku, plan, udrulesubnetids, resourceGroup",
        "size": 0,
        "title": "NSG Rules",
        "showExportToExcel": true,
        "queryType": 1,
        "resourceType": "microsoft.resourcegraph/resources",
        "crossComponentResources": [
          "{SubscriptionName}"
        ]
      },
      "conditionalVisibility": {
        "parameterName": "tab",
        "comparison": "isEqualTo",
        "value": "internal"
      },
      "name": "NSG Rules"
    },
    {
      "type": 1,
      "content": {
        "json": "Application Gateway/Load Balancer Rules\r\n\r\nReview the Load Balancer, Application Gateway, Front Door to see the backend pools (like IP, Port and connecting to Public IPs).\r\n",
        "style": "success"
      },
      "conditionalVisibility": {
        "parameterName": "tab",
        "comparison": "isEqualTo",
        "value": "rules"
      },
      "name": "AppGateway Rules"
    },
    {
      "type": 3,
      "content": {
        "version": "KqlItem/1.0",
        "query": "Resources\r\n| where type contains \"microsoft.network/applicationgateway\"\r\n| extend RG = substring(id, 0, indexof(id, '/providers'))\r\n| extend backendAddressPools = properties.backendAddressPools\r\n| extend frontendIPConfigurations = properties.frontendIPConfigurations\r\n| extend frontendPorts = properties.frontendPorts\r\n| extend backendHttpSettingsCollection = properties.backendHttpSettingsCollection\r\n| extend httpListeners = properties.httpListeners\r\n| mv-expand bagexpansion=array frontendIPConfigurations, frontendPorts, backendAddressPools, backendHttpSettingsCollection\r\n| extend PIPid = tostring(frontendIPConfigurations.properties.publicIPAddress.id)\r\n| join ( Resources | where type=='microsoft.network/publicipaddresses' | extend PublicIPAddress=tostring(properties.ipAddress) | project PIPid=id,PublicIPAddress ) on PIPid\r\n| extend ListenerPort = tostring(frontendPorts.properties.port)\r\n| extend BackendPoolName = tostring(backendAddressPools.name)\r\n| extend BackendPoolIPAddress = tostring(backendAddressPools.properties.backendAddresses.[0].ipAddress)\r\n| extend BackendPoolFQDN = tostring(backendAddressPools.properties.backendAddresses.[0].fqdn)\r\n| extend BackendPort = tostring(backendHttpSettingsCollection.properties.port)\r\n| extend BackendProtocol = tostring(backendHttpSettingsCollection.properties.protocol)\r\n| extend HTTPHostName = tostring(backendHttpSettingsCollection.properties.hostName)\r\n| project-away frontendIPConfigurations, frontendPorts, httpListeners, backendAddressPools, backendHttpSettingsCollection, PIPid, PIPid1, extendedLocation, zones, identity, properties, managedBy, kind, tenantId, tags, name, sku, plan, resourceGroup",
        "size": 0,
        "title": "Application Gateway Rules",
        "showExportToExcel": true,
        "queryType": 1,
        "resourceType": "microsoft.resourcegraph/resources",
        "crossComponentResources": [
          "{SubscriptionName}"
        ]
      },
      "conditionalVisibility": {
        "parameterName": "tab",
        "comparison": "isEqualTo",
        "value": "rules"
      },
      "name": "Application Gateway Rules"
    },
    {
      "type": 3,
      "content": {
        "version": "KqlItem/1.0",
        "query": "Resources\r\n| where type contains 'microsoft.network/loadbalancers'\r\n| extend RG = substring(id, 0, indexof(id, '/providers'))\r\n| extend loadBalancingRules = properties.loadBalancingRules\r\n| extend NatRules = properties.inboundNatRules\r\n| extend frontendIPConfig = properties.frontendIPConfigurations\r\n| mv-expand bagexpansion=array loadBalancingRules, NatRules\r\n| extend LBrulename = tostring(loadBalancingRules.name)\r\n| extend LBruleprotocol = tostring(loadBalancingRules.properties.protocol)\r\n| extend LBrulefrontendPort = tostring(loadBalancingRules.properties.frontendPort)\r\n| extend LBrulebackendPort = tostring(loadBalancingRules.properties.backendPort)\r\n| extend LBrulebackendPool = tostring(loadBalancingRules.properties.backendAddressPool.id)\r\n| extend Natrulename = tostring(NatRules.name)\r\n| extend Natruleprotocol = tostring(NatRules.properties.protocol)\r\n| extend NatrulefrontendPort = tostring(NatRules.properties.frontendPort)\r\n| extend NatrulebackendPort = tostring(NatRules.properties.backendPort)\r\n| extend NatrulebackendConfig = NatRules.properties.backendIPConfiguration.id\r\n| extend frontendIPConfig = properties.frontendIPConfigurations\r\n| mv-expand bagexpansion=array frontendIPConfig\r\n| extend frontendIPAllocation = tostring(frontendIPConfig.properties.privateIPAllocationMethod)\r\n| extend frontendprivateIPAddress = tostring(frontendIPConfig.properties.privateIPAddress)\r\n| extend frontendpublicIPResource = tostring(frontendIPConfig.properties.publicIPAddress.id)\r\n| join ( Resources | where type=='microsoft.network/publicipaddresses' | extend frontendPublicIPAddress=tostring(properties.ipAddress) | project frontendpublicIPResource=id,frontendPublicIPAddress ) on frontendpublicIPResource\r\n| project-away kind, managedBy, apiVersion, identity, zones, frontendpublicIPResource, frontendpublicIPResource1, tenantId, properties, tags, extendedLocation, plan, loadBalancingRules, NatRules, frontendIPConfig, name, resourceGroup, sku",
        "size": 0,
        "title": "Load Balancer Rules",
        "showExportToExcel": true,
        "queryType": 1,
        "resourceType": "microsoft.resourcegraph/resources",
        "crossComponentResources": [
          "{SubscriptionName}"
        ]
      },
      "conditionalVisibility": {
        "parameterName": "tab",
        "comparison": "isEqualTo",
        "value": "rules"
      },
      "name": "Load Balancer Rules"
    },
    {
      "type": 3,
      "content": {
        "version": "KqlItem/1.0",
        "query": "Resources\r\n| where type contains \"microsoft.network/frontdoors\"\r\n| extend RG = substring(id, 0, indexof(id, '/providers'))\r\n| extend FrontDoorId = tostring(properties.frontdoorId)\r\n| extend FrontDoorDNSName = tostring(properties.cName)\r\n| extend FrontDoorFriendlyName = tostring(properties.friendlyName)\r\n| extend FrontDoorResourceState = tostring(properties.resourceState)\r\n| extend frontendEndpoints = properties.frontendEndpoints.[0]\r\n| extend routingRules = properties.routingRules.[0]\r\n| extend backendPools = properties.backendPools.[0]\r\n| extend FrontendHostName = tostring(frontendEndpoints.properties.hostName)\r\n| extend FrontendWAFPolicyId = frontendEndpoints.properties.webApplicationFirewallPolicyLink.id\r\n| extend FrontendConfigName = tostring(frontendEndpoints.name)\r\n| extend FrontendResourceState = tostring(frontendEndpoints.properties.resourceState)\r\n| extend FrontendResourceId = frontendEndpoints.id\r\n| extend RoutingProtocol = routingRules.properties.acceptedProtocols\r\n| extend RoutingPattern = routingRules.properties.patternsToMatch\r\n| mvexpand bagexpansion=array RoutingProtocol, RoutingPattern\r\n| extend RoutingResourceState = tostring(routingRules.properties.resourceState)\r\n| extend backends = backendPools.properties.backends.[0]\r\n| extend BackendAddress = tostring(backends.address)\r\n| extend BackendHTTPPort = tostring(backends.httpPort)\r\n| extend BackendHTTPSPort = tostring(backends.httpsPort)\r\n| extend BackendCertNameCheck = tostring(properties.backendPoolsSettings.enforceCertificateNameCheck)\r\n| extend BackendSendRecvTimeoutSeconds = tostring(properties.backendPoolsSettings.sendRecvTimeoutSeconds)\r\n| extend BackendHostHeader = tostring(backends.backendHostHeader)\r\n| extend BackendPoolName = tostring(backendPools.name)\r\n| extend BackendResourceState = tostring(backendPools.properties.resourceState)\r\n| extend BackendResourceId = backendPools.id\r\n| project-away kind, managedBy, sku, plan, properties, identity, zones, extendedLocation, frontendEndpoints, routingRules, backendPools, backends, tenantId, tags, name, resourceGroup",
        "size": 0,
        "title": "Front Door Rules",
        "showExportToExcel": true,
        "queryType": 1,
        "resourceType": "microsoft.resourcegraph/resources",
        "crossComponentResources": [
          "{SubscriptionName}"
        ]
      },
      "conditionalVisibility": {
        "parameterName": "tab",
        "comparison": "isEqualTo",
        "value": "rules"
      },
      "name": "Front Door Rules"
    },
    {
      "type": 3,
      "content": {
        "version": "KqlItem/1.0",
        "query": "Resources\r\n| where type == \"microsoft.network/trafficmanagerprofiles\"\r\n| extend RG = substring(id, 0, indexof(id, '/providers'))\r\n| extend FQDN = tostring(properties.dnsConfig.fqdn)\r\n| extend RelativeName = tostring(properties.dnsConfig.relativeName)\r\n| extend DNSTTL = tostring(properties.dnsConfig.ttl)\r\n| extend endpoints = properties.endpoints\r\n| mvexpand bagexpansion=array endpoints\r\n| extend TargetResourceid = endpoints.properties.targetResourceId\r\n| extend Target = tostring(endpoints.properties.target)\r\n| extend Priority = tostring(endpoints.properties.priority)\r\n| extend Weight = tostring(endpoints.properties.weight)\r\n| extend EndpointLocation = tostring(endpoints.properties.endpointLocation)\r\n| extend EndpointName = tostring(endpoints.name)\r\n| extend EndpointStatus = tostring(endpoints.properties.endpointMonitorStatus)\r\n| extend Endpointid = endpoints.id\r\n| extend TrafficRoutingMethod = tostring(properties.trafficRoutingMethod)\r\n| extend ProfileStatus = tostring(properties.profileStatus)\r\n| extend Protocol = tostring(properties.monitorConfig.protocol)\r\n| extend Port = tostring(properties.monitorConfig.port)\r\n| extend Path = tostring(properties.monitorConfig.path)\r\n| extend TimeoutInSeconds = tostring(properties.monitorConfig.timeoutInSeconds)\r\n| extend IntervalInSeconds = tostring(properties.monitorConfig.intervalInSeconds)\r\n| extend MonitorStatus = tostring(properties.monitorConfig.profileMonitorStatus)\r\n| extend NumberOfFailuresTolerated = tostring(properties.monitorConfig.toleratedNumberOfFailures)\r\n| project-away kind, managedBy, sku, plan, identity, zones, extendedLocation, endpoints, properties, name, tenantId, location, tags, resourceGroup",
        "size": 0,
        "title": "Traffic Manager Profiles",
        "showExportToExcel": true,
        "queryType": 1,
        "resourceType": "microsoft.resourcegraph/resources",
        "crossComponentResources": [
          "{SubscriptionName}"
        ]
      },
      "conditionalVisibility": {
        "parameterName": "tab",
        "comparison": "isEqualTo",
        "value": "rules"
      },
      "name": "Traffic Manager Profiles"
    },
    {
      "type": 1,
      "content": {
        "json": "Network Services\r\n\r\nReview the existing Bastion Hosts, VPN Gateways, VNet Gateways, Express Route, Azure Firewalls and WAF Policies which connects your Azure Resources to external networks",
        "style": "success"
      },
      "conditionalVisibility": {
        "parameterName": "tab",
        "comparison": "isEqualTo",
        "value": "network"
      },
      "name": "text - 39"
    },
    {
      "type": 3,
      "content": {
        "version": "KqlItem/1.0",
        "query": "Resources\r\n| where type contains \"microsoft.network/azurefirewalls\"\r\n| extend ResourceGroup = substring(id, 0, indexof(id, '/providers'))\r\n| extend ipConfigurations = properties.ipConfigurations\r\n| extend FirewallSKU = tostring(properties.sku.tier)\r\n| extend ThreatIntelMode = tostring(properties.threatIntelMode)\r\n| extend DNSConfig = properties.additionalProperties\r\n| mv-expand bagexpansion=array ipConfigurations\r\n| extend PIPid = tostring(ipConfigurations.properties.publicIPAddress.id)\r\n| join ( Resources | where type=='microsoft.network/publicipaddresses' | extend PublicIPAddress=tostring(properties.ipAddress) | project PIPid=id,PublicIPAddress ) on PIPid\r\n| extend PrivateIP = tostring(ipConfigurations.properties.privateIPAddress)\r\n| extend PrivateIPAllocation = tostring(ipConfigurations.properties.privateIPAllocationMethod)\r\n| extend SubnetId = ipConfigurations.properties.subnet.id\r\n| project-away kind, managedBy, plan, sku, properties, identity, zones, extendedLocation, ipConfigurations, PIPid, PIPid1, tags, tenantId, name, resourceGroup",
        "size": 0,
        "title": "Azure Firewalls",
        "showExportToExcel": true,
        "queryType": 1,
        "resourceType": "microsoft.resourcegraph/resources",
        "crossComponentResources": [
          "{SubscriptionName}"
        ]
      },
      "conditionalVisibility": {
        "parameterName": "tab",
        "comparison": "isEqualTo",
        "value": "network"
      },
      "name": "AzureFirewall"
    },
    {
      "type": 3,
      "content": {
        "version": "KqlItem/1.0",
        "query": "Resources\r\n| where type == \"microsoft.network/applicationgatewaywebapplicationfirewallpolicies\"\r\n| extend RG = substring(id, 0, indexof(id, '/providers'))\r\n| extend AppGWid = properties.applicationGateways.[0].id\r\n| extend WAFMode = tostring(properties.policySettings.mode)\r\n| extend MaxRequestBodySizeInKB = tostring(properties.policySettings.maxRequestBodySizeInKb)\r\n| extend FileUploadLimitInMB = tostring(properties.policySettings.fileUploadLimitInMb)\r\n| extend RequestBodyCheck = tostring(properties.policySettings.requestBodyCheck)\r\n| extend ManagedRulesExclusions = tostring(properties.managedRules.exclusions)\r\n| extend ManagedRuleSets = properties.managedRules.managedRuleSets\r\n| mvexpand bagexpansion=array ManagedRuleSets\r\n| extend ManagedRuleSetVersion = tostring(ManagedRuleSets.ruleSetVersion)\r\n| extend ManagedRuleSetType = tostring(ManagedRuleSets.ruleSetType)\r\n| extend ManagedRuleSetGroupOverrides = tostring(ManagedRuleSets.ruleGroupOverrides)\r\n| extend CustomRules = tostring(properties.customRules)\r\n| project-away kind, managedBy, sku, plan, properties, identity, zones, extendedLocation, ManagedRuleSets, tenantId, name, tags, resourceGroup",
        "size": 0,
        "title": "Application Gateway WAF Policy",
        "showExportToExcel": true,
        "queryType": 1,
        "resourceType": "microsoft.resourcegraph/resources",
        "crossComponentResources": [
          "{SubscriptionName}"
        ]
      },
      "conditionalVisibility": {
        "parameterName": "tab",
        "comparison": "isEqualTo",
        "value": "network"
      },
      "name": "WAF Policies"
    },
    {
      "type": 3,
      "content": {
        "version": "KqlItem/1.0",
        "query": "Resources\r\n| where type == \"microsoft.network/frontdoorwebapplicationfirewallpolicies\"\r\n| extend RG = substring(id, 0, indexof(id, '/providers'))\r\n| extend WAFPolicyName = name\r\n| extend FrontDoorEndpoint = properties.frontendEndpointLinks.[0].id\r\n| extend WAFMode = tostring(properties.policySettings.mode)\r\n| extend CustomBlockResponseCode = tostring(properties.policySettings.customBlockResponseStatusCode)\r\n| extend CustomBlockResponseBody = tostring(properties.policySettings.customBlockResponseBody)\r\n| extend RedirectURL = properties.policySettings.redirectUrl\r\n| extend ManagedRuleSets = properties.managedRules.managedRuleSets\r\n| mvexpand bagexpansion=array ManagedRuleSets\r\n| extend ManagedRuleSetVersion = tostring(ManagedRuleSets.ruleSetVersion)\r\n| extend ManagedRuleSetType = tostring(ManagedRuleSets.ruleSetType)\r\n| extend ManagedRuleSetExclusions = tostring(ManagedRuleSets.exclusions)\r\n| extend ManagedRuleSetGroupOverrides = tostring(ManagedRuleSets.ruleGroupOverrides)\r\n| extend CustomRules = tostring(properties.customRules.rules)\r\n| project-away kind, managedBy, sku, plan, properties, identity, zones, extendedLocation, ManagedRuleSets, tenantId, tags, name, resourceGroup",
        "size": 0,
        "title": "Front Door  WAF Policy",
        "showExportToExcel": true,
        "queryType": 1,
        "resourceType": "microsoft.resourcegraph/resources",
        "crossComponentResources": [
          "{SubscriptionName}"
        ]
      },
      "conditionalVisibility": {
        "parameterName": "tab",
        "comparison": "isEqualTo",
        "value": "network"
      },
      "name": "WAF Policies - Copy"
    },
    {
      "type": 3,
      "content": {
        "version": "KqlItem/1.0",
        "query": "Resources\r\n| where type contains \"microsoft.network/bastionhosts\"\r\n| extend RG = substring(id, 0, indexof(id, '/providers'))\r\n| extend DNSName = tostring(properties.dnsName)\r\n| extend ipConfigurations = properties.ipConfigurations.[0]\r\n| extend privateIPAllocationMethod = tostring(ipConfigurations.properties.privateIPAllocationMethod)\r\n| extend PIPid = tostring(ipConfigurations.properties.publicIPAddress.id)\r\n| join ( Resources | where type=='microsoft.network/publicipaddresses' | extend frontendPublicIPAddress=tostring(properties.ipAddress) | project PIPid=id,frontendPublicIPAddress ) on PIPid\r\n| project-away kind, managedBy, sku, plan, properties, identity, zones, extendedLocation, ipConfigurations, PIPid, PIPid1, tags, tenantId, name, resourceGroup",
        "size": 0,
        "title": "Bastion Hosts",
        "showExportToExcel": true,
        "queryType": 1,
        "resourceType": "microsoft.resourcegraph/resources",
        "crossComponentResources": [
          "{SubscriptionName}"
        ]
      },
      "conditionalVisibility": {
        "parameterName": "tab",
        "comparison": "isEqualTo",
        "value": "network"
      },
      "name": "bastionhost"
    },
    {
      "type": 3,
      "content": {
        "version": "KqlItem/1.0",
        "query": "resources\r\n| where type == \"microsoft.network/virtualwans\"\r\n| extend RG = substring(id, 0, indexof(id, '/providers'))\r\n| extend allowBranchToBranchTraffic = properties.allowBranchToBranchTraffic\r\n| extend allowVnetToVnetTraffic = properties.allowVnetToVnetTraffic\r\n| project-away kind, managedBy, sku, plan, identity,tenantId, tags, zones, extendedLocation, name, properties, resourceGroup",
        "size": 0,
        "title": "Virtual WAN",
        "showExportToExcel": true,
        "queryType": 1,
        "resourceType": "microsoft.resourcegraph/resources",
        "crossComponentResources": [
          "{SubscriptionName}"
        ]
      },
      "conditionalVisibility": {
        "parameterName": "tab",
        "comparison": "isEqualTo",
        "value": "network"
      },
      "name": "Virtual Wan"
    },
    {
      "type": 3,
      "content": {
        "version": "KqlItem/1.0",
        "query": "Resources\r\n| where type contains \"microsoft.network/vpngateways\"\r\n| extend RG = substring(id, 0, indexof(id, '/providers'))\r\n| extend ipConfigurations = properties.ipConfigurations\r\n| mv-expand bagexpansion=array ipConfigurations\r\n| extend instanceid = tostring(ipConfigurations.id)\r\n| extend publicIP = tostring(ipConfigurations.publicIpAddress)\r\n| extend privateIP = tostring(ipConfigurations.privateIpAddress)\r\n| extend virtualHubid = tostring(properties.virtualHub.id)\r\n| extend natRules = tostring(properties.natRules)\r\n| project-away kind, managedBy, sku, plan, identity, zones, extendedLocation, ipConfigurations, properties, tenantId, tags, name, resourceGroup",
        "size": 0,
        "title": "VPN Gateways",
        "showExportToExcel": true,
        "queryType": 1,
        "resourceType": "microsoft.resourcegraph/resources",
        "crossComponentResources": [
          "{SubscriptionName}"
        ]
      },
      "conditionalVisibility": {
        "parameterName": "tab",
        "comparison": "isEqualTo",
        "value": "network"
      },
      "name": "VPNGateways"
    },
    {
      "type": 3,
      "content": {
        "version": "KqlItem/1.0",
        "query": "Resources\r\n| where type contains \"microsoft.network/virtualnetworkgateways\"\r\n| extend RG = substring(id, 0, indexof(id, '/providers'))\r\n| extend ipConfigurations = properties.ipConfigurations\r\n| mv-expand bagexpansion=array ipConfigurations\r\n| extend PIPid = tostring(ipConfigurations.properties.publicIPAddress.id)\r\n| join ( Resources | where type=='microsoft.network/publicipaddresses' | extend frontendPublicIPAddress=tostring(properties.ipAddress) | project PIPid=id,frontendPublicIPAddress ) on PIPid\r\n| extend Subnetid = ipConfigurations.properties.subnet.id\r\n| extend privateIPAllocation = tostring(ipConfigurations.properties.privateIPAllocationMethod)\r\n| extend gatewayType = tostring(properties.gatewayType)\r\n| extend vpnType = tostring(properties.vpnType)\r\n| extend skuName = tostring(properties.sku.name)\r\n| extend skuTier = tostring(properties.sku.tier)\r\n| extend skuCapacity = tostring(properties.sku.capacity)\r\n| project-away PIPid, PIPid1, extendedLocation, zones, identity, managedBy, sku, plan, kind, ipConfigurations, properties, tenantId, tags, name, resourceGroup",
        "size": 0,
        "title": "Virtual Network Gateways",
        "showExportToExcel": true,
        "queryType": 1,
        "resourceType": "microsoft.resourcegraph/resources",
        "crossComponentResources": [
          "{SubscriptionName}"
        ]
      },
      "conditionalVisibility": {
        "parameterName": "tab",
        "comparison": "isEqualTo",
        "value": "network"
      },
      "name": "VirtualNetworkGateways"
    },
    {
      "type": 3,
      "content": {
        "version": "KqlItem/1.0",
        "query": "Resources\r\n| where type contains \"microsoft.network/expressroutecircuits\"\r\n| extend ServiceProviderProvisioningState = tostring(properties.serviceProviderProvisioningState)\r\n| extend ServiceProviderName = tostring(properties.serviceProviderProperties.serviceProviderName)\r\n| extend BandwidthInMbps = tostring(properties.serviceProviderProperties.bandwidthInMbps)\r\n| extend PeeringLocation = tostring(properties.serviceProviderProperties.peeringLocation)\r\n| extend CircuitProvisioningState = tostring(properties.circuitProvisioningState)\r\n| extend ServiceKey = tostring(properties.serviceKey)\r\n| extend peerings = properties.peerings.[0].properties\r\n| extend PeeringState = tostring(peerings.state)\r\n| extend PrimaryPeerAddressPrefix = tostring(peerings.primaryPeerAddressPrefix)\r\n| extend SecondaryPeerAddressPrefix = tostring(peerings.secondaryPeerAddressPrefix)\r\n| extend PeeringType = tostring(peerings.peeringType)\r\n| extend AzureASN = tostring(peerings.azureASN)\r\n| extend PeerASN = tostring(peerings.peerASN)\r\n| extend VlanId = tostring(peerings.vlanId)\r\n| project-away kind, managedBy, plan, properties, identity, zones, extendedLocation, peerings, tenantId, sku, tags, name",
        "size": 0,
        "title": "Express Route Circuits",
        "showExportToExcel": true,
        "queryType": 1,
        "resourceType": "microsoft.resourcegraph/resources",
        "crossComponentResources": [
          "{SubscriptionName}"
        ]
      },
      "conditionalVisibility": {
        "parameterName": "tab",
        "comparison": "isEqualTo",
        "value": "network"
      },
      "name": "ExpressRouteCircuits"
    },
    {
      "type": 1,
      "content": {
        "json": "Logic App Workflows\r\n\r\nReview the LogicAppWorkflows without ManagedIdenity under Identity Filed and also review the connections for any external saas application.\r\n",
        "style": "success"
      },
      "conditionalVisibility": {
        "parameterName": "tab",
        "comparison": "isEqualTo",
        "value": "api"
      },
      "name": "text - 40 - Copy"
    },
    {
      "type": 3,
      "content": {
        "version": "KqlItem/1.0",
        "query": "resources\r\n| where type == 'microsoft.logic/workflows'\r\n|extend propertiesJson=parse_json(properties)\r\n|extend ConJson=propertiesJson[\"parameters\"][\"$connections\"][\"value\"]\r\n|mvexpand Conn=ConJson\r\n|where   notnull(Conn)\r\n|extend connectionId=extract(\"\\\"connectionId\\\":\\\"(.*)\\\"\",1,tostring(Conn))\r\n| project-away type, tenantId, kind,sku, plan,propertiesJson, ConJson, Conn",
        "size": 0,
        "title": "Logic App Workflows",
        "queryType": 1,
        "resourceType": "microsoft.resourcegraph/resources",
        "crossComponentResources": [
          "{SubscriptionName}"
        ]
      },
      "conditionalVisibility": {
        "parameterName": "tab",
        "comparison": "isEqualTo",
        "value": "api"
      },
      "name": "LogicAppWorkflows"
    },
    {
      "type": 1,
      "content": {
        "json": "API Connection\r\n\r\nReview the API Connections for any individuls's account as authenticated user and status for any error\r\n",
        "style": "success"
      },
      "conditionalVisibility": {
        "parameterName": "tab",
        "comparison": "isEqualTo",
        "value": "api"
      },
      "name": "text - 40"
    },
    {
      "type": 3,
      "content": {
        "version": "KqlItem/1.0",
        "query": "resources\r\n| where type =~ 'Microsoft.Web/connections'\r\n| extend authenticateduser= properties.authenticatedUser\r\n| extend status = properties.overallStatus\r\n| project-away type, tenantId, kind, sku, plan",
        "size": 0,
        "title": "API Connections",
        "showExportToExcel": true,
        "queryType": 1,
        "resourceType": "microsoft.resourcegraph/resources",
        "crossComponentResources": [
          "{SubscriptionName}"
        ],
        "sortBy": []
      },
      "conditionalVisibility": {
        "parameterName": "tab",
        "comparison": "isEqualTo",
        "value": "api"
      },
      "name": "APIconnection"
    },
    {
      "type": 1,
      "content": {
        "json": "Internal Networks\r\n\r\nReview machines with Public IP assigned\r\n\r\n\r\n",
        "style": "success"
      },
      "conditionalVisibility": {
        "parameterName": "tab",
        "comparison": "isEqualTo",
        "value": "internal"
      },
      "name": "text - 41"
    },
    {
      "type": 3,
      "content": {
        "version": "KqlItem/1.0",
        "query": "Resources\r\n| where type contains \"microsoft.network/networkinterfaces\"\r\n| extend RG = substring(id, 0, indexof(id, '/providers'))\r\n| extend ipConfigurations = properties.ipConfigurations.[0]\r\n| extend PrivateIPAddress = tostring(ipConfigurations.properties.privateIPAddress)\r\n| extend PublicIPAddressid = ipConfigurations.properties.publicIPAddress.id\r\n| extend PrivateIPAddressVersion = tostring(ipConfigurations.properties.privateIPAddressVersion)\r\n| extend PrivateIPAllocationMethod = tostring(ipConfigurations.properties.privateIPAllocationMethod)\r\n| extend Subnet = ipConfigurations.properties.subnet.id\r\n| extend IpConfigid = ipConfigurations.id\r\n| extend InternalDNSSuffix = tostring(properties.dnsSettings.internalDomainNameSuffix)\r\n| extend NSGid = properties.networkSecurityGroup.id\r\n| extend VMid = properties.virtualMachine.id\r\n| extend PrivateEndpointId = properties.privateEndpoint.id\r\n| extend MacAddress = tostring(properties.macAddress)\r\n| extend NicType = tostring(properties.nicType)\r\n| project-away kind, managedBy, sku, plan, properties, identity, zones, extendedLocation, ipConfigurations, tenantId, tags, name, resourceGroup",
        "size": 0,
        "title": "Network Interfaces",
        "showExportToExcel": true,
        "queryType": 1,
        "resourceType": "microsoft.resourcegraph/resources",
        "crossComponentResources": [
          "{SubscriptionName}"
        ]
      },
      "conditionalVisibility": {
        "parameterName": "tab",
        "comparison": "isEqualTo",
        "value": "internal"
      },
      "name": "NIC"
    },
    {
      "type": 1,
      "content": {
        "json": "Internal Networks\r\n\r\nReview VNet Peerings to check the allowed Vnet network connections \r\n\r\n",
        "style": "success"
      },
      "conditionalVisibility": {
        "parameterName": "tab",
        "comparison": "isEqualTo",
        "value": "internal"
      },
      "name": "text - 41 - Copy"
    },
    {
      "type": 3,
      "content": {
        "version": "KqlItem/1.0",
        "query": "Resources\r\n| where type contains \"virtualNetworks\"\r\n| extend RG = substring(id, 0, indexof(id, '/providers'))\r\n| extend DDoSProtectionEnabled = properties.enableDdosProtection\r\n| extend DDoSProtectionPlan = properties.ddosProtectionPlan.id\r\n| extend VNETAddressRange = properties.addressSpace.addressPrefixes\r\n| extend subnets = properties.subnets\r\n| mvexpand bagexpansion=array subnets\r\n| extend SubnetName = tostring(subnets.name)\r\n| extend SubnetAddress = tostring(subnets.properties.addressPrefix)\r\n| extend ServiceEndpoints = subnets.properties.serviceEndpoints.[0]\r\n| extend SubnetIPConfigid = subnets.properties.ipConfigurations.[0].id\r\n| extend VNETPeerings = properties.virtualNetworkPeerings.[0]\r\n| extend VNETPeeringName = VNETPeerings.name\r\n| extend VNETPeerAddress = VNETPeerings.properties.remoteAddressSpace.addressPrefixes\r\n| extend VNETPeerRemoteVNETid = VNETPeerings.properties.remoteVirtualNetwork.id\r\n| extend VNETPeeringState = VNETPeerings.properties.peeringState\r\n| extend AllowVirtualNetworkAccess = VNETPeerings.properties.allowVirtualNetworkAccess\r\n| extend AllowForwardedTraffic = VNETPeerings.properties.allowForwardedTraffic\r\n| extend AllowGatewayTransit = VNETPeerings.properties.allowGatewayTransit\r\n| project-away kind, managedBy, sku, plan, identity, zones, extendedLocation, properties, subnets, VNETPeerings, tenantId, name, tags, resourceGroup",
        "size": 0,
        "title": "Virtual Networks",
        "showExportToExcel": true,
        "queryType": 1,
        "resourceType": "microsoft.resourcegraph/resources",
        "crossComponentResources": [
          "{SubscriptionName}"
        ]
      },
      "conditionalVisibility": {
        "parameterName": "tab",
        "comparison": "isEqualTo",
        "value": "internal"
      },
      "name": "vnet"
    },
    {
      "type": 1,
      "content": {
        "json": "Internal Networks\r\n\r\nReview the Route Tables with internet destinations and nexthop without virtualappliances since they might be allowing internet traffic without passing through Firewall\r\n\r\n",
        "style": "success"
      },
      "conditionalVisibility": {
        "parameterName": "tab",
        "comparison": "isEqualTo",
        "value": "internal"
      },
      "name": "text - 41 - Copy - Copy"
    },
    {
      "type": 3,
      "content": {
        "version": "KqlItem/1.0",
        "query": "Resources\r\n| where type == \"microsoft.network/routetables\"\r\n| extend RG = substring(id, 0, indexof(id, '/providers'))\r\n| extend SubnetArray = properties.subnets\r\n| mvexpand bagexpansion=array SubnetArray\r\n| extend Subnetid = SubnetArray.id\r\n| extend DisableBGPRoutePropagation = tostring(properties.disableBgpRoutePropagation)\r\n| extend RouteArray = properties.routes\r\n| mvexpand bagexpansion=array RouteArray\r\n| extend RouteName = tostring(RouteArray.name)\r\n| extend Routeid = RouteArray.id\r\n| extend RouteAddressPrefix = tostring(RouteArray.properties.addressPrefix)\r\n| extend RouteHasBGPOverride = tostring(RouteArray.properties.hasBgpOverride)\r\n| extend RouteNextHopType = tostring(RouteArray.properties.nextHopType)\r\n| project-away kind, managedBy, sku, plan, properties, identity, zones, extendedLocation, SubnetArray, RouteArray, name, tenantId, tags, resourceGroup\r\n",
        "size": 0,
        "title": "Route Tables",
        "showExportToExcel": true,
        "queryType": 1,
        "resourceType": "microsoft.resourcegraph/resources",
        "crossComponentResources": [
          "{SubscriptionName}"
        ]
      },
      "conditionalVisibility": {
        "parameterName": "tab",
        "comparison": "isEqualTo",
        "value": "internal"
      },
      "name": "Routetable"
    },
    {
      "type": 1,
      "content": {
        "json": "Internal Networks\r\n\r\nReview Subnets without Route Tables to see if they have any system which needs to route it through Firewall",
        "style": "success"
      },
      "conditionalVisibility": {
        "parameterName": "tab",
        "comparison": "isEqualTo",
        "value": "internal"
      },
      "name": "text - 41 - Copy - Copy - Copy"
    },
    {
      "type": 3,
      "content": {
        "version": "KqlItem/1.0",
        "query": "Resources\r\n| where type contains \"virtualNetworks\"\r\n| extend RG = substring(id, 0, indexof(id, '/providers'))\r\n| extend SubnetArray = properties.subnets\r\n| mvexpand bagexpansion=array SubnetArray\r\n| extend Subnetid = SubnetArray.id\r\n| extend SubnetAddress = SubnetArray.properties.addressPrefix\r\n| extend SubnetRoutetable = SubnetArray.properties.routeTable.id\r\n| extend SubnetRoutetableId = SubnetArray.properties.routeTable.id\r\n| project id, type, location, RG, subscriptionId, Subnetid, SubnetAddress, SubnetRoutetable, SubnetRoutetableId",
        "size": 0,
        "title": "Subnets without Route Tables",
        "showExportToExcel": true,
        "queryType": 1,
        "resourceType": "microsoft.resourcegraph/resources"
      },
      "conditionalVisibility": {
        "parameterName": "tab",
        "comparison": "isEqualTo",
        "value": "internal"
      },
      "name": "subnet"
    },
    {
      "type": 3,
      "content": {
        "version": "KqlItem/1.0",
        "query": "Resources\r\n| where type == \"microsoft.network/privateendpoints\"\r\n| extend RG = substring(id, 0, indexof(id, '/providers'))\r\n| extend NetworkInterfaces = properties.networkInterfaces.[0].id\r\n| extend Subnet = properties.subnet.id\r\n| extend ManualPrivateLinkServiceConnections = tostring(properties.manualPrivateLinkServiceConnections)\r\n| extend PrivateLinkServiceid = properties.privateLinkServiceConnections.[0].properties.privateLinkServiceId\r\n| extend PrivateLinkServiceGroupids = tostring(properties.privateLinkServiceConnections.[0].properties.groupIds)\r\n| extend PivateLinkServiceConnections = properties.privateLinkServiceConnections.[0].id\r\n| extend PrivateLinkCustomDNS = tostring(properties.customDnsConfigs)\r\n| project-away kind, managedBy, sku, plan, properties, identity, zones, extendedLocation, tags, tenantId, name, resourceGroup",
        "size": 0,
        "title": "Private Links",
        "showExportToExcel": true,
        "queryType": 1,
        "resourceType": "microsoft.resourcegraph/resources",
        "crossComponentResources": [
          "{SubscriptionName}"
        ]
      },
      "conditionalVisibility": {
        "parameterName": "tab",
        "comparison": "isEqualTo",
        "value": "internal"
      },
      "name": "PrivateLinks"
    },
    {
      "type": 3,
      "content": {
        "version": "KqlItem/1.0",
        "query": "securityresources\r\n    | where type == \"microsoft.security/regulatorycompliancestandards/regulatorycompliancecontrols/regulatorycomplianceassessments\"\r\n    | extend complianceStandardId = replace( \"-\", \" \", extract(@'/regulatoryComplianceStandards/([^/]*)', 1, id))\r\n    | where complianceStandardId ==  \"Microsoft cloud security benchmark\"\r\n    | join kind = leftouter(\r\n    securityresources\r\n    | where type == \"microsoft.security/assessments\") on subscriptionId, name\r\n    | extend complianceState = properties.state\r\n    | extend resourceSource = tolower(tostring(properties1.resourceDetails.Source))\r\n    | extend recommendationId = id1\r\n    | extend resourceId = trim(' ', tolower(tostring(case(resourceSource =~ 'azure', properties1.resourceDetails.Id,\r\n                                                        resourceSource =~ 'gcp', properties1.resourceDetails.GcpResourceId,\r\n                                                        resourceSource =~ 'aws', properties1.resourceDetails.AwsResourceId,\r\n                                                        extract('^(.+)/providers/Microsoft.Security/assessments/.+$',1,recommendationId)))))\r\n    | extend regexResourceId = extract_all(@\"/providers/[^/]+(?:/([^/]+)/[^/]+(?:/[^/]+/[^/]+)?)?/([^/]+)/([^/]+)$\", resourceId)[0]\r\n    | extend resourceType = iff(regexResourceId[1] != \"\", regexResourceId[1], iff(regexResourceId[0] != \"\", regexResourceId[0], \"subscriptions\"))\r\n    | extend resourceName = regexResourceId[2]\r\n    | extend recommendationName = name\r\n    | extend RecommendationName = properties1.displayName\r\n    | extend description = properties1.metadata.description\r\n    | extend remediationSteps = properties1.metadata.remediationDescription\r\n    | extend severity = properties1.metadata.severity\r\n    | extend state = properties1.status.code\r\n    | extend notApplicableReason = properties1.status.cause\r\n    | extend RecommendationLink = properties1.links.azurePortal\r\n    | extend complianceStandardId = replace( \"-\", \" \", extract(@'/regulatoryComplianceStandards/([^/]*)', 1, id))\r\n    | extend complianceControlId = extract(@\"/regulatoryComplianceControls/([^/]*)\", 1, id)\r\n    | join kind = leftouter (securityresources\r\n    | where type == \"microsoft.security/regulatorycompliancestandards/regulatorycompliancecontrols\"\r\n    | extend complianceStandardId = replace( \"-\", \" \", extract(@'/regulatoryComplianceStandards/([^/]*)', 1, id))\r\n    | where complianceStandardId == \"Microsoft cloud security benchmark\"\r\n    | extend  controlName = tostring(properties.description)\r\n    | project controlId = name, controlName\r\n    | distinct  *) on $right.controlId == $left.complianceControlId\r\n    | extend RecommendationName = tostring(properties.description)\r\n    | summarize Failed = countif(state == \"Unhealthy\"), Passed = countif(state == \"Healthy\" or complianceState == \"Passed\"), Total = countif(state == \"Unhealthy\" or state == \"Healthy\" or complianceState == \"Passed\") by RecommendationName, ControlID = controlId\r\n    | extend PassedControls = (Passed/todouble(Total))*100\r\n| join kind = leftouter (securityresources\r\n    | where type == \"microsoft.security/regulatorycompliancestandards/regulatorycompliancecontrols/regulatorycomplianceassessments\"\r\n    | extend complianceStandardId = replace( \"-\", \" \", extract(@'/regulatoryComplianceStandards/([^/]*)', 1, id))\r\n    | where complianceStandardId ==  \"Microsoft cloud security benchmark\"\r\n    | extend RecommendationName = tostring(properties.description)\r\n    | extend RecommendationLink = tostring(properties.assessmentDetailsLink)\r\n    | project RecommendationName, RecommendationLink, name) on RecommendationName \r\n| extend Remediate=RecommendationLink\r\n| where ControlID in ( \"NS.2\")\r\n| parse Remediate with * '/#blade/Microsoft_Azure_Security/RecommendationsBlade/assessmentKey/' assessmentKey '/' *\r\n| extend overallstate= iff(PassedControls==100, \"Passed\", \"Failed\")\r\n| distinct RecommendationName, Total,  PassedControls, overallstate,Remediate,Passed, Failed, assessmentKey\r\n| sort by Total, Passed desc\r\n| limit 250",
        "size": 0,
        "title": "Public Access Security Recommendations",
        "queryType": 1,
        "resourceType": "microsoft.resourcegraph/resources",
        "crossComponentResources": [
          "{SubscriptionName}"
        ],
        "gridSettings": {
          "formatters": [
            {
              "columnMatch": "RecommendationName",
              "formatter": 18,
              "formatOptions": {
                "thresholdsOptions": "icons",
                "thresholdsGrid": [
                  {
                    "operator": "Default",
                    "thresholdValue": null,
                    "representation": "success",
                    "text": "{0}{1}"
                  }
                ]
              }
            },
            {
              "columnMatch": "Total",
              "formatter": 5
            },
            {
              "columnMatch": "PassedControls",
              "formatter": 5
            },
            {
              "columnMatch": "overallstate",
              "formatter": 18,
              "formatOptions": {
                "thresholdsOptions": "icons",
                "thresholdsGrid": [
                  {
                    "operator": "contains",
                    "thresholdValue": "Passed",
                    "representation": "success",
                    "text": "{0}{1}"
                  },
                  {
                    "operator": "contains",
                    "thresholdValue": "Failed",
                    "representation": "failed",
                    "text": "{0}{1}"
                  },
                  {
                    "operator": "Default",
                    "thresholdValue": null,
                    "representation": "success",
                    "text": "{0}{1}"
                  }
                ]
              }
            },
            {
              "columnMatch": "Remediate",
              "formatter": 7,
              "formatOptions": {
                "linkTarget": "OpenBlade",
                "linkLabel": "View Recommendations",
                "bladeOpenContext": {
                  "bladeName": "RecommendationsBlade",
                  "extensionName": "Microsoft_Azure_Security",
                  "bladeParameters": [
                    {
                      "name": "assessmentKey",
                      "source": "column",
                      "value": "assessmentKey"
                    }
                  ]
                }
              }
            },
            {
              "columnMatch": "Passed",
              "formatter": 5
            },
            {
              "columnMatch": "Failed",
              "formatter": 5
            },
            {
              "columnMatch": "assessmentKey",
              "formatter": 5
            }
          ],
          "labelSettings": [
            {
              "columnId": "overallstate",
              "label": "ComplianceState"
            }
          ]
        }
      },
      "conditionalVisibility": {
        "parameterName": "tab",
        "comparison": "isEqualTo",
        "value": "security"
      },
      "name": "MDCRecommendations - Copy"
    },
    {
      "type": 3,
      "content": {
        "version": "KqlItem/1.0",
        "query": "securityresources\r\n    | where type == \"microsoft.security/regulatorycompliancestandards/regulatorycompliancecontrols/regulatorycomplianceassessments\"\r\n    | extend complianceStandardId = replace( \"-\", \" \", extract(@'/regulatoryComplianceStandards/([^/]*)', 1, id))\r\n    | where complianceStandardId ==  \"Microsoft cloud security benchmark\"\r\n    | join kind = leftouter(\r\n    securityresources\r\n    | where type == \"microsoft.security/assessments\") on subscriptionId, name\r\n    | extend complianceState = properties.state\r\n    | extend resourceSource = tolower(tostring(properties1.resourceDetails.Source))\r\n    | extend recommendationId = id1\r\n    | extend resourceId = trim(' ', tolower(tostring(case(resourceSource =~ 'azure', properties1.resourceDetails.Id,\r\n                                                        resourceSource =~ 'gcp', properties1.resourceDetails.GcpResourceId,\r\n                                                        resourceSource =~ 'aws', properties1.resourceDetails.AwsResourceId,\r\n                                                        extract('^(.+)/providers/Microsoft.Security/assessments/.+$',1,recommendationId)))))\r\n    | extend regexResourceId = extract_all(@\"/providers/[^/]+(?:/([^/]+)/[^/]+(?:/[^/]+/[^/]+)?)?/([^/]+)/([^/]+)$\", resourceId)[0]\r\n    | extend resourceType = iff(regexResourceId[1] != \"\", regexResourceId[1], iff(regexResourceId[0] != \"\", regexResourceId[0], \"subscriptions\"))\r\n    | extend resourceName = regexResourceId[2]\r\n    | extend recommendationName = name\r\n    | extend RecommendationName = properties1.displayName\r\n    | extend description = properties1.metadata.description\r\n    | extend remediationSteps = properties1.metadata.remediationDescription\r\n    | extend severity = properties1.metadata.severity\r\n    | extend state = properties1.status.code\r\n    | extend notApplicableReason = properties1.status.cause\r\n    | extend RecommendationLink = properties1.links.azurePortal\r\n    | extend complianceStandardId = replace( \"-\", \" \", extract(@'/regulatoryComplianceStandards/([^/]*)', 1, id))\r\n    | extend complianceControlId = extract(@\"/regulatoryComplianceControls/([^/]*)\", 1, id)\r\n    | join kind = leftouter (securityresources\r\n    | where type == \"microsoft.security/regulatorycompliancestandards/regulatorycompliancecontrols\"\r\n    | extend complianceStandardId = replace( \"-\", \" \", extract(@'/regulatoryComplianceStandards/([^/]*)', 1, id))\r\n    | where complianceStandardId == \"Microsoft cloud security benchmark\"\r\n    | extend  controlName = tostring(properties.description)\r\n    | project controlId = name, controlName\r\n    | distinct  *) on $right.controlId == $left.complianceControlId\r\n    | extend RecommendationName = tostring(properties.description)\r\n    | summarize Failed = countif(state == \"Unhealthy\"), Passed = countif(state == \"Healthy\" or complianceState == \"Passed\"), Total = countif(state == \"Unhealthy\" or state == \"Healthy\" or complianceState == \"Passed\") by RecommendationName, ControlID = controlId\r\n    | extend PassedControls = (Passed/todouble(Total))*100\r\n| join kind = leftouter (securityresources\r\n    | where type == \"microsoft.security/regulatorycompliancestandards/regulatorycompliancecontrols/regulatorycomplianceassessments\"\r\n    | extend complianceStandardId = replace( \"-\", \" \", extract(@'/regulatoryComplianceStandards/([^/]*)', 1, id))\r\n    | where complianceStandardId ==  \"Microsoft cloud security benchmark\"\r\n    | extend RecommendationName = tostring(properties.description)\r\n    | extend RecommendationLink = tostring(properties.assessmentDetailsLink)\r\n    | project RecommendationName, RecommendationLink, name) on RecommendationName \r\n| extend Remediate=RecommendationLink\r\n| where ControlID in ( \"NS.1\", \"NS.3\")\r\n| parse Remediate with * '/#blade/Microsoft_Azure_Security/RecommendationsBlade/assessmentKey/' assessmentKey '/' *\r\n| extend overallstate= iff(PassedControls==100, \"Passed\", \"Failed\")\r\n| distinct RecommendationName, Total,  PassedControls, overallstate,Remediate,Passed, Failed, assessmentKey\r\n| sort by Total, Passed desc\r\n| limit 250",
        "size": 0,
        "title": "VM Public Access Security Recommendations",
        "queryType": 1,
        "resourceType": "microsoft.resourcegraph/resources",
        "crossComponentResources": [
          "{SubscriptionName}"
        ],
        "gridSettings": {
          "formatters": [
            {
              "columnMatch": "RecommendationName",
              "formatter": 18,
              "formatOptions": {
                "thresholdsOptions": "icons",
                "thresholdsGrid": [
                  {
                    "operator": "Default",
                    "thresholdValue": null,
                    "representation": "success",
                    "text": "{0}{1}"
                  }
                ]
              }
            },
            {
              "columnMatch": "Total",
              "formatter": 5
            },
            {
              "columnMatch": "PassedControls",
              "formatter": 5
            },
            {
              "columnMatch": "overallstate",
              "formatter": 18,
              "formatOptions": {
                "thresholdsOptions": "icons",
                "thresholdsGrid": [
                  {
                    "operator": "contains",
                    "thresholdValue": "Passed",
                    "representation": "success",
                    "text": "{0}{1}"
                  },
                  {
                    "operator": "contains",
                    "thresholdValue": "Failed",
                    "representation": "failed",
                    "text": "{0}{1}"
                  },
                  {
                    "operator": "Default",
                    "thresholdValue": null,
                    "representation": "success",
                    "text": "{0}{1}"
                  }
                ]
              }
            },
            {
              "columnMatch": "Remediate",
              "formatter": 7,
              "formatOptions": {
                "linkTarget": "OpenBlade",
                "linkLabel": "View Recommendations",
                "bladeOpenContext": {
                  "bladeName": "RecommendationsBlade",
                  "extensionName": "Microsoft_Azure_Security",
                  "bladeParameters": [
                    {
                      "name": "assessmentKey",
                      "source": "column",
                      "value": "assessmentKey"
                    }
                  ]
                }
              }
            },
            {
              "columnMatch": "Passed",
              "formatter": 5
            },
            {
              "columnMatch": "Failed",
              "formatter": 5
            },
            {
              "columnMatch": "assessmentKey",
              "formatter": 5
            }
          ],
          "sortBy": [
            {
              "itemKey": "$gen_thresholds_overallstate_3",
              "sortOrder": 1
            }
          ],
          "labelSettings": [
            {
              "columnId": "overallstate",
              "label": "ComplianceState"
            }
          ]
        },
        "sortBy": [
          {
            "itemKey": "$gen_thresholds_overallstate_3",
            "sortOrder": 1
          }
        ]
      },
      "conditionalVisibility": {
        "parameterName": "tab",
        "comparison": "isEqualTo",
        "value": "security"
      },
      "name": "MDCRecommendations - Copy - Copy"
    },
    {
      "type": 3,
      "content": {
        "version": "KqlItem/1.0",
        "query": "securityresources\r\n    | where type == \"microsoft.security/regulatorycompliancestandards/regulatorycompliancecontrols/regulatorycomplianceassessments\"\r\n    | extend complianceStandardId = replace( \"-\", \" \", extract(@'/regulatoryComplianceStandards/([^/]*)', 1, id))\r\n    | where complianceStandardId ==  \"Microsoft cloud security benchmark\"\r\n    | join kind = leftouter(\r\n    securityresources\r\n    | where type == \"microsoft.security/assessments\") on subscriptionId, name\r\n    | extend complianceState = properties.state\r\n    | extend resourceSource = tolower(tostring(properties1.resourceDetails.Source))\r\n    | extend recommendationId = id1\r\n    | extend resourceId = trim(' ', tolower(tostring(case(resourceSource =~ 'azure', properties1.resourceDetails.Id,\r\n                                                        resourceSource =~ 'gcp', properties1.resourceDetails.GcpResourceId,\r\n                                                        resourceSource =~ 'aws', properties1.resourceDetails.AwsResourceId,\r\n                                                        extract('^(.+)/providers/Microsoft.Security/assessments/.+$',1,recommendationId)))))\r\n    | extend regexResourceId = extract_all(@\"/providers/[^/]+(?:/([^/]+)/[^/]+(?:/[^/]+/[^/]+)?)?/([^/]+)/([^/]+)$\", resourceId)[0]\r\n    | extend resourceType = iff(regexResourceId[1] != \"\", regexResourceId[1], iff(regexResourceId[0] != \"\", regexResourceId[0], \"subscriptions\"))\r\n    | extend resourceName = regexResourceId[2]\r\n    | extend recommendationName = name\r\n    | extend RecommendationName = properties1.displayName\r\n    | extend description = properties1.metadata.description\r\n    | extend remediationSteps = properties1.metadata.remediationDescription\r\n    | extend severity = properties1.metadata.severity\r\n    | extend state = properties1.status.code\r\n    | extend notApplicableReason = properties1.status.cause\r\n    | extend RecommendationLink = properties1.links.azurePortal\r\n    | extend complianceStandardId = replace( \"-\", \" \", extract(@'/regulatoryComplianceStandards/([^/]*)', 1, id))\r\n    | extend complianceControlId = extract(@\"/regulatoryComplianceControls/([^/]*)\", 1, id)\r\n    | join kind = leftouter (securityresources\r\n    | where type == \"microsoft.security/regulatorycompliancestandards/regulatorycompliancecontrols\"\r\n    | extend complianceStandardId = replace( \"-\", \" \", extract(@'/regulatoryComplianceStandards/([^/]*)', 1, id))\r\n    | where complianceStandardId == \"Microsoft cloud security benchmark\"\r\n    | extend  controlName = tostring(properties.description)\r\n    | project controlId = name, controlName\r\n    | distinct  *) on $right.controlId == $left.complianceControlId\r\n    | extend RecommendationName = tostring(properties.description)\r\n    | summarize Failed = countif(state == \"Unhealthy\"), Passed = countif(state == \"Healthy\" or complianceState == \"Passed\"), Total = countif(state == \"Unhealthy\" or state == \"Healthy\" or complianceState == \"Passed\") by RecommendationName, ControlID = controlId\r\n    | extend PassedControls = (Passed/todouble(Total))*100\r\n| join kind = leftouter (securityresources\r\n    | where type == \"microsoft.security/regulatorycompliancestandards/regulatorycompliancecontrols/regulatorycomplianceassessments\"\r\n    | extend complianceStandardId = replace( \"-\", \" \", extract(@'/regulatoryComplianceStandards/([^/]*)', 1, id))\r\n    | where complianceStandardId ==  \"Microsoft cloud security benchmark\"\r\n    | extend RecommendationName = tostring(properties.description)\r\n    | extend RecommendationLink = tostring(properties.assessmentDetailsLink)\r\n    | project RecommendationName, RecommendationLink, name) on RecommendationName \r\n| extend Remediate=RecommendationLink\r\n| where ControlID in ( \"DP.3\")\r\n| parse Remediate with * '/#blade/Microsoft_Azure_Security/RecommendationsBlade/assessmentKey/' assessmentKey '/' *\r\n| extend overallstate= iff(PassedControls==100, \"Passed\", \"Failed\")\r\n| distinct RecommendationName, Total,  PassedControls, overallstate,Remediate,Passed, Failed, assessmentKey\r\n| sort by Total, Passed desc\r\n| limit 250",
        "size": 0,
        "title": "Data in transit  Security Recommendations",
        "queryType": 1,
        "resourceType": "microsoft.resourcegraph/resources",
        "crossComponentResources": [
          "{SubscriptionName}"
        ],
        "gridSettings": {
          "formatters": [
            {
              "columnMatch": "RecommendationName",
              "formatter": 18,
              "formatOptions": {
                "thresholdsOptions": "icons",
                "thresholdsGrid": [
                  {
                    "operator": "Default",
                    "thresholdValue": null,
                    "representation": "success",
                    "text": "{0}{1}"
                  }
                ]
              }
            },
            {
              "columnMatch": "Total",
              "formatter": 5
            },
            {
              "columnMatch": "PassedControls",
              "formatter": 5
            },
            {
              "columnMatch": "overallstate",
              "formatter": 18,
              "formatOptions": {
                "thresholdsOptions": "icons",
                "thresholdsGrid": [
                  {
                    "operator": "contains",
                    "thresholdValue": "Passed",
                    "representation": "success",
                    "text": "{0}{1}"
                  },
                  {
                    "operator": "contains",
                    "thresholdValue": "Failed",
                    "representation": "failed",
                    "text": "{0}{1}"
                  },
                  {
                    "operator": "Default",
                    "thresholdValue": null,
                    "representation": "success",
                    "text": "{0}{1}"
                  }
                ]
              }
            },
            {
              "columnMatch": "Remediate",
              "formatter": 7,
              "formatOptions": {
                "linkTarget": "OpenBlade",
                "linkLabel": "View Recommendations",
                "bladeOpenContext": {
                  "bladeName": "RecommendationsBlade",
                  "extensionName": "Microsoft_Azure_Security",
                  "bladeParameters": [
                    {
                      "name": "assessmentKey",
                      "source": "column",
                      "value": "assessmentKey"
                    }
                  ]
                }
              }
            },
            {
              "columnMatch": "Passed",
              "formatter": 5
            },
            {
              "columnMatch": "Failed",
              "formatter": 5
            },
            {
              "columnMatch": "assessmentKey",
              "formatter": 5
            }
          ],
          "sortBy": [
            {
              "itemKey": "$gen_thresholds_overallstate_3",
              "sortOrder": 1
            }
          ],
          "labelSettings": [
            {
              "columnId": "overallstate",
              "label": "ComplianceState"
            }
          ]
        },
        "sortBy": [
          {
            "itemKey": "$gen_thresholds_overallstate_3",
            "sortOrder": 1
          }
        ]
      },
      "conditionalVisibility": {
        "parameterName": "tab",
        "comparison": "isEqualTo",
        "value": "security"
      },
      "name": "MDCRecommendations - Copy - Copy - Copy"
    }
  ],
  "fallbackResourceIds": [
    "/subscriptions/d0d4dfbc-9f34-41b1-8767-58818e4ac738/resourcegroups/contoso-mgmt/providers/microsoft.operationalinsights/workspaces/contoso-la"
  ],
  "fromTemplateId": "sentinel-UserWorkbook",
  "$schema": "https://github.com/Microsoft/Application-Insights-Workbooks/blob/master/schema/workbook.json"
}